
setClass("utime",
    contains="numeric",
    slots=c(format="character",time.zone="character"))

setMethod("initialize",
    "utime",
    function(.Object,format=timeDateOptions("time.out.format")[[1]],
             time.zone=Sys.timezone()) {
        .Object@.Data = 0
        .Object@format = format
        .Object@time.zone = time.zone
        .Object
    }
)

utime <- function(val=0,in.format=timeDateOptions("time.in.format")[[1]],
	format,zone)
{
    if (is(val,"timeDate")) {
        res = as(val,"utime")
        if (missing(format)) format = val@format
        if (missing(zone) || is.null(zone)) zone = val@time.zone
    }
    else {
        if (missing(zone) || is.null(zone)) zone = timeDateOptions("time.zone")[[1]]
        if (is.character(val)) {
            if (length(val) == 1 && val == "now") res = utime.now()
            else res = as(splusTimeDate::timeDate(val,in.format=in.format,zone=zone),"utime")
            if (any(is.na(res@.Data))) {
              if (length(val) == 1) warning(paste(val,"not parsable with in.format=",
                      in.format))
              else warning(paste("some dates not parsable with in.format=",in.format))
            }
        }
        else res = as(val,"utime")
        if (missing(format)) format = timeDateOptions("time.out.format")[[1]]
    }
    res@format = format
    res@time.zone = zone
    res
}

#
setAs("utime","numeric",function(from) from@.Data)

# coerce from numeric to utime
setAs("numeric","utime",
    function(from)
    {
        ret = new("utime");
        ret@.Data = from;
        # reset the format and time.zone, since the default constructor
        # sets them to whatever timeDateOptions() was at compile time.
        ret@format = "%Y %m %d %H:%M:%S"
        ret@time.zone = Sys.timezone()
        ret
    }
)

# coerce from utime to timeDate
setAs("utime","timeDate",
    function(from)
    {
        # the timeDate constructor chokes if ms is NA, so set it to 0.
        if (any(bad <- is.na(from@.Data)))
            splusTimeDate::timeDate(julian=floor(from@.Data/86400) + 3653,
                ms=ifelse(bad,0,round((from@.Data %% 86400) * 1000,digits=3)),
                format=from@format,zone=from@time.zone)
        else {
            # cat("utime=",from@.Data[2],"\n")
            # cat("julian=",floor(from@.Data[2]/86400) + 3653,"\n")
            # cat("ms=",round((from@.Data[2] %% 86400.0) * 1000,digits=3),"\n")
            splusTimeDate::timeDate(julian=floor(from@.Data/86400) + 3653,
                  ms=round((from@.Data %% 86400.0) * 1000,digits=3),
                  format=from@format,zone=from@time.zone)
        }
    }
)

# setIs("utime","timeDate",
# 	coerce=function(from) splusTimeDate::timeDate(julian=floor(from/86400) + 3653,
# 		ms=(from %% 86400) * 1000))

# coerce from timeDate to utime
setAs("timeDate","utime",
    function(from)
      utime((from@columns[[1]] - 3653) * 86400 + from@columns[[2]] / 1000,format=from@format,zone=from@time.zone))

# coerce from utime to timeDate to character
setAs("utime","character",
    function(from) as(as(from,"timeDate"),"character"))

# coerce from character to timeDate to utime
setAs("character","utime",
    function(from) as(as(from,"timeDate"),"utime"))

# coerce from utime to list. This isn't very efficient -
# perhaps should it call c++ code.
setAs("utime","list",
    function(from)
    {
        list(year=toYear(from),
            mon=toMonth(from),
            day=toDay(from),
            hour=toHour(from),
            min=toMinute(from),
            sec=toSecond(from),
            TZ=from@time.zone
            )
    }
)

# coerce from list to utime
setAs("list","utime",
    function(from)
    {
        # Splus doesn't have a %D or %j for day of year input parsing.
        # It does have a %D to output the day of year...
        if (!is.null(from$yday) && is.null(from$mon) && is.null(from$day)) {
            from$mon = 1
            from$day = 1
            ut1 = utime(paste(from$year,from$mon,from$day,
                from$hour,from$min,from$sec),
                in.format="%Y%m%d[%H[%M[%S[.%N]]]]",zone=as.character(from$TZ))
            td1 = as(ut1,"timeDate")
            td2 = td1
            td2@.Data[[1]] = td2@.Data[[1]] + from$yday - 1
            ut2 = utime(td2)

            # correct for DST change between Jan 1 and date
            td1@format = "%H"
            h1 = as.numeric(format(td1))
            td1@format = "%M"
            m1 = as.numeric(format(td1))

            td2@format = "%H"
            h2 = as.numeric(format(td2))
            td2@format = "%M"
            m2 = as.numeric(format(td2))

            h2 = h2 + 24

            dstdiff = ((h2 - h1) * 3600 + (m2 - m1) * 60) %% 86400
            if (dstdiff > 43200) ut2 = ut2 + 86400 - dstdiff
            else ut2 = ut2 - dstdiff
        }
        else {
            ut2 = utime(paste(from$year,from$mon,from$day,
                from$hour,from$min,from$sec),
                in.format="%Y%m%d[%H[%M[%S[.%N]]]]",zone=as.character(from$TZ))
        }
        ut2
    }
)

if (isGeneric("toYear",where=1)) removeGeneric("toYear",where=1)

setGeneric("toYear",function(x) standardGeneric("toYear"))

setMethod("toYear","utime",
    function(x)
    {
        td = as(x,"timeDate")
        td@format = "%Y"
        as.numeric(as.character(td))
    }
)

if (isGeneric("toMonth",where=1)) removeGeneric("toMonth",where=1)

setGeneric("toMonth",function(x) standardGeneric("toMonth"))

setMethod("toMonth","utime",
    function(x)

    {
      td = as(x,"timeDate")
      td@format = "%m"
      as.numeric(as.character(td))
    }
)

if (isGeneric("toDay",where=1)) removeGeneric("toDay",where=1)

setGeneric("toDay",function(x) standardGeneric("toDay"))

setMethod("toDay","utime",
    function(x)
    {
      td = as(x,"timeDate")
      td@format = "%d"
      as.numeric(as.character(td))
    }
)

if (isGeneric("toHour",where=1)) removeGeneric("toHour",where=1)

setGeneric("toHour",function(x) standardGeneric("toHour"))

setMethod("toHour","utime",
    function(x) {
      td = as(x,"timeDate")
      td@format = "%H"
      as.numeric(as.character(td))
    }
)

if (isGeneric("toMinute",where=1)) removeGeneric("toMinute",where=1)

setGeneric("toMinute",function(x) standardGeneric("toMinute"))

setMethod("toMinute","utime",
    function(x)
    {
      td = as(x,"timeDate")
      td@format = "%M"
      as.numeric(as.character(td))
    }
)

if (isGeneric("toSecond",where=1)) removeGeneric("toSecond",where=1)

setGeneric("toSecond",function(x) standardGeneric("toSecond"))

setMethod("toSecond","utime",
    function(x)
    {
        td = as(x,"timeDate")
        td@format = "%S.%03N"
        as.numeric(as.character(td))
    }
)

setMethod("format","utime",
    function(x,...)
    {
        if (hasArg(format)) format = list(...)$format
        else format = x@format
        if (hasArg(time.zone)) time.zone = list(...)$time.zone
        else if (hasArg(TZ)) time.zone = list(...)$TZ
        else time.zone = x@time.zone
        if (is.list(time.zone)) time.zone = unlist(time.zone)
        x = as(x,"timeDate")
        x@format = format
        x@time.zone = time.zone
        format(x)
    }
)

if (isGeneric("monthly",where=1)) removeGeneric("monthly",where=1)

setGeneric("monthly",function(from,to) standardGeneric("monthly"))

setMethod("monthly",signature(from="utime",to="utime"),
    function(from,to)
    {
        res <- NULL
        while (1) {
          ul <- as.list(from)
          ul$day <- 1     # first day of month
          ul$hour <- ul$min <- ul$sec <- 0
          from <- utime(ul)
          if(from > to) break
          res <- c(res, from)
          from <- utime(from + 32 * 86400)
        }
        utime(res)
    }
)

setMethod("show","utime",function(object) show(as(object,"timeDate")))

setMethod("diff","utime",function(x,...) diff(x@.Data))

if (FALSE) {
setMethod("[","utime",
    function(x,...,drop=F) utime(x@.Data[...])
)

setMethod("[<-",signature(x="utime",i="ANY",j="missing",value="utime"),
    function(x,i,value)
    {
        # i <- list(...)[[1]]
        x@.Data[i] <- value@.Data
        x
    }
)

setMethod("[<-",signature(x="utime",i="ANY",j="missing",value="numeric"),
    function(x,i,value)
    {
        # i <- list(...)[[1]]
        x@.Data[i] <- value
        x
    }
)
setMethod("[<-",signature(x="utime",i="ANY",j="missing",value="ANY"),
    function(x,i,value)
    {
        # i <- list(...)[[1]]
        x@.Data[i] <- utime(value)@.Data
        x
    }
)

}

setMethod("Ops",signature(e1="utime",e2="numeric"),
    function(e1,e2)
    {
        e1@.Data = callGeneric(e1@.Data,e2)
        e1
    }
)

setMethod("Ops",signature(e1="numeric",e2="utime"),
    function(e1,e2)
    {
      e2@.Data = callGeneric(e1,e2@.Data)
      e2
    }
)
utime.now <- function() {
    utime(.C("utime_now",sec=integer(1))$sec)
}

# if (isGeneric("abline",where=1)) removeGeneric("abline",where=1)
# setGeneric("abline",function(a,...) standardGeneric("abline"))
setMethod("abline",signature(a="utime"),
    function(a,...)
    {
        sc <- plot.ats.scale
        v <- (as.numeric(a) - sc$off) / sc$scale
        abline.default(v=v,...)
        a
    }
)

tlocator <- function(n=1,type="n",...)
{
    if (n == 1) 
        cat("Use mouse to select a time on the plot ... ")
    else
        cat("Use mouse to select times on the plot.\nClick middle button, or both buttons on two button mouse to terminate ... ")

    times <- utime(locator(n,type=type,...)$x * plot.ats.scale$scale + plot.ats.scale$off)
    cat("done\n")
    times
}

